#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

# from pyltp import SentenceSplitter
from pyltp import Postagger
from pyltp import Segmentor
from pyltp import Parser
from config import parse_args


def convert_tree(dep_list, target_idx, target_pos):
    v = "( " + target_pos + " " + str(target_idx) + " )"
    for i in range(len(dep_list)):
        if dep_list[i][3] == -1: #used edge
            continue
        mod_idx = i
        mod_pos = dep_list[i][1]
        head_idx = int(dep_list[i][2])
        head_pos = dep_list[head_idx][1]
        rel = dep_list[i][3]

        if mod_idx == target_idx:
            dep_list[i][3] = -1
            v = "( " + rel + " " + convert_tree(dep_list, mod_idx, mod_pos) + " " + convert_tree(dep_list, head_idx, head_pos) + " )"

    for i in range(len(dep_list)):
        if i == target_idx:
            break
        if dep_list[i][3] == -1:
            continue
        mod_idx = i
        mod_pos = dep_list[i][1]
        head_idx = int(dep_list[i][2])
        head_pos = dep_list[head_idx][1]
        rel = dep_list[i][3]

        if head_idx == target_idx:
            dep_list[i][3] = -1
            v = "( " + rel + " " + convert_tree(dep_list, mod_idx, mod_pos) + " " + convert_tree(dep_list, head_idx, head_pos) + " )"

    for i in reversed(range(len(dep_list))):
        if i == target_idx:
            break
        if dep_list[i][3] == -1:
            continue
        mod_idx = i
        mod_pos = dep_list[i][1]
        head_idx = int(dep_list[i][2])
        head_pos = dep_list[head_idx][1]
        rel = dep_list[i][3]

        if head_idx == target_idx:
            dep_list[i][3] = -1
            v = "( " + rel + " " + convert_tree(dep_list, mod_idx, mod_pos) + " " + convert_tree(dep_list, head_idx, head_pos) + " )"

    return v

def convert(company_name,words,postags,arcs):
    arc_head = []
    arc_relation = []
    for arc in arcs:
        head = arc.head - 1
        arc_head.append(head)
        arc_relation.append(arc.relation)
    dep_parsed_sent_list = zip(list(words),list(postags),arc_head,arc_relation)
    #print(dep_parsed_sent_list)
    dep_parsed_sent_list = [list(d) for d in dep_parsed_sent_list]
    #print(dep_parsed_sent_list)

    #find the target
    target_idx = -1
    target_pos = ""
    for i,dep in enumerate(dep_parsed_sent_list):
        if company_name == dep[0]:
            #print (dep[0])
            target_idx = i
            target_pos = dep[1]
        if dep[2] == -1:
            dep[3] = -1
    if target_idx == -1:
        return '###'

    #build tree according to the target
    target_tree = convert_tree(dep_parsed_sent_list, target_idx, target_pos)
    #print('dep_tree:',target_tree)

    #check all the dep have been used
    for dep in dep_parsed_sent_list:
        if dep[3] != -1:
            return '###'

    return target_tree


if __name__ == "__main__":
    args=parse_args()
    LTP_DATA_DIR='../data/ltp_data'

    pos_model_path = os.path.join(LTP_DATA_DIR, 'pos.model')  # 词性标注模型路径，模型名称为`pos.model`
    cws_model_path = os.path.join(LTP_DATA_DIR,'cws.model')#分词
    par_model_path = os.path.join(LTP_DATA_DIR,'parser.model')#语法分析

    segmentor=Segmentor()
    segmentor.load_with_lexicon(cws_model_path,'/users4/bbcai/data/movie/lexicon')

    postagger = Postagger() # 初始化实例
    postagger.load(pos_model_path)  # 加载模型

    parser=Parser()
    parser.load(par_model_path)

    entity_name = "电影"
    #sentence =[ "专门打电话来问我要不要买手机","最近想买部手机","我想入手一部索尼的手机,主要用于日常拍摄和毕业旅行"]

    #mode_list=['val','test','train']
    mode_list=['val','test','train']
    trigger_words=['麦兜我和我妈妈', '可爱的你', '爸爸的假期', '忍者神龟', '全能囧爸', '宙斯之子：赫拉克勒斯', '幻影追凶', '暗恋99天', '复仇者联盟2：奥创纪元', '新地雷战', '求爱嫁期', '归来', '怨灵', '怨灵人偶', '赤道', '变形金刚4：绝迹重生', '神剑传奇', '万物生长', '摩尔庄园3：魔幻列车大冒险', '晚秋', '秘术', '太空一号', '整容日记', '四大名捕3', '森林孤影', '菜鸟', '绝命逃亡', '霍比特人1：意外之旅', '吉星高照2015', '环形使者', '爱情进化论', '冰川时代2：融冰之灾',
    '死亡之谜之双鱼玉佩', '不惧风暴', '高海拔', '守护者联盟', '大海啸之鲨口逃生', '妈咪侠', '饥饿游戏3：嘲笑鸟（上）', '叶问：终极一战', '钟馗伏魔：雪妖魔灵', '大话西游', '冰封：重生之门', '怖偶', '心花路放', '赛尔号大电影2之雷伊与迈尔斯', '天使：生命处方', '超体', '露水红颜', '饥饿游戏3：嘲笑鸟(上)', '魔警', '有一个地方只有我们知道', '碟仙诡谭', '地心引力', '黄金福将', '心咒', '笔仙惊魂', '魔法总动员', '全面回忆', '敢死队3', '敢死队2', '丑男大翻身', '冲锋车',
    '毕业那年：分手季', '铁线虫入侵', '美国队长', '超凡蜘蛛侠2', '天生爱情狂', '黄金时代', '诡八楼', '81号农场之疯狂的麦咭', '忍者神龟：变种时代', '幻影车神：魔盗激情', '纯纯欲动', '黄飞鸿', '新年来啦', '超凡蜘蛛侠', '普罗旺斯惊魂记', '绣春刀', 'X战警：逆转未来', '幻影车神', '金色时光', '百星酒店', '从哪来到哪去', '诡替身', '龙', '嫁个100分男人', '十万个冷笑话', '我是女王', '潜龙风云', '逆战', '开心超人', '念念', '房车奇遇', '冬荫功2：拳霸天下', '人狼大战',
    '深情约定', '大海啸', '新年来啦之大闹除夕', '艺术家', '四大名捕', '麦兜当当伴我心', '母亲的梦想', '微爱', '摩尔庄园', '桃姐', '听风者', '深海挑战', '死亡派对', '猪猪侠之囧囧危机', '银河护卫队', '一个人的武林', '我的播音系女友', '宝贝对不起', '深夜前的五分钟', '我爱灰太狼', '灰姑娘', '孤岛', '浮城大亨', '失孤', '近距离击杀', '有一天', '窃听风云3', '将错就错', '全城通缉', '少年派的奇幻漂流', '三个火枪手', '新妈妈再爱我一次', '战狼', '大力神：色雷斯之战', '再爱一次好不好', '21岁派对',
    '在劫难逃', '陌路惊笑', '大力神', '疯狂原始人', '蓝色骨头', '虐面人之死灵面膜', '我就是我', '天将雄师', '驯龙高手2', '英雄赤女2之当今霸主', '新天生一对', '逆世界', '索命童话', '黑衣人3', '破坏者', '剑河', '猩球崛起2：黎明之战', '喜羊羊与灰太狼之羊年喜羊羊', '喜羊羊与灰太狼', '贵族大盗', '谍·莲花', '谁偷了我的菜', '丛林之王', '孤岛惊魂2', '暴走神探', '坏姐姐', '我的青春蜜友', '西游记', '一号目标', '鸣梁海战', '私人订制', 'HOLD住爱', '江湖论剑实录',
    '黑月', '喜羊羊与灰太狼之喜气羊羊过蛇年', '安妮', '冲上云霄', '地心历险记', '北京纽约', '消失的子弹', '西遊降魔篇', '盲探', '京城81号', '白雪公主之魔镜魔镜', '百万巨鳄', '等一个人咖啡', '飓风营救3', '飓风营救2', '凤凰台', '怪谈', '动物也疯狂', '王牌', '人再囧途', '饥饿游戏', '百变爱人', '旋风九日', '分手大师', '土豪520', '找个高富帅', '撒娇女人最好命', '变形金刚', '疯狂72小时', 'X战警', '蜡笔总动员', '一万年以后', '神秘世界历险记', '大丑', '热血男人帮',
    '灵魂战车2：复仇时刻', '非常小特务', '钢铁侠3', '功夫', '明日边缘', '第一眼爱情', '人间小团圆', '马达加斯加3', '悲惨世界', '第七子：降魔之战', '后会无期', '单身男女2', '街舞小子', '床下有人2', '玩命追踪', '形影不离', '黑衣人', '速度与激情', '波鲁鲁冰雪大冒险', '硬汉奶爸', '普罗米修斯', '沉睡魔咒', '摩纳哥王妃', '王牌特工', '我是你的野蛮女友', '空中营救', '孤岛惊魂', '机械师', '拆散专家', '猩球崛起', '兔侠之青黎传说', '洛克王国2圣龙的心愿',
    '潜艇总动员4：章鱼奇遇记', '亲家过年', '北回归线', '驯龙高手', '超级战舰', '潜艇总动员2', '重生爱人', '催眠大师', '新地雷战：神勇小子', '王牌特工：特工学院', '冰川时代', '天使', '特警判官', '王的盛宴', '床下有人', '卧龙岗', '封门诡影', '给野兽献花', '冬荫功', '老雷斯的故事', '致我们终将逝去的青春', '摧毁泰坦尼克号的冰山杀手', '龙之谷：破晓奇兵', '烈日灼心', '谍莲花', '狼图腾', '巴啦啦小魔仙', '摩登森林之美食总动员', '超验骇客', '我愿意', '凡人烦恼',
    '0.5的爱情', '双城计中计', '浮城', '魔幻仙踪', '谁动了我的梦想', '天河', '神笔马良', '辛巴达历险记', '血滴子', '太空熊猫总动员', '铁血精英', '忘了去懂你', '白雪公主', '封门村', '情谜', '扑通扑通我的人生', '地心历险记2：神秘岛', '第七子', '大武当之天地密码', '绝密跟踪', '甜蜜蜜', '换爱七日', '萨米大冒险', '火线反攻', '阿里巴巴：大盗奇兵', '诡爱', '铜雀台', '电梯惊魂', '狄仁杰之神都龙王', '大话西游之大圣娶亲', '猪猪侠', '男人不可以穷', '爸爸去哪儿2', '美人邦', '危险关系',
    '太平轮(上)', '斐济99℃爱情', '霍比特人', '饮食男女', '迈阿密行动', '白发魔女传', '血彩', '西游降魔篇', '痞子英雄', '阿里巴巴', '黄金大劫案', '天台爱情', '二次曝光', '美国队长2', '一代宗師', '推拿', '挑战者联盟', '精武青春', '快乐的大脚2', '小企鹅波鲁鲁之冰雪世界赛车冒险记', '通灵', '叛谍追击', '潜艇总动员', '05的爱情', '一代宗师', '劫案迷云', '青春时光', '夜莺', '咱们结婚吧', '特工艾米拉', '安娜卡列尼娜', '毕业那年', '勇敢传说', '伤心童话', '我是奋青',
    '铠甲勇士之雅塔莱斯', '北京遇上西雅图', '黑夜传说前传：狼族再起', '神探驾到', '秦时明月大电影之龙腾万里', '猪猪侠之勇闯巨人岛', '窃听风云', '土豪', '大魔术师', '澳门风云2', '微爱之渐入佳境', '激浪青春', '坚不可摧', '超人', '美丽笨女人', '澳门风云', '飞越老人院', '孤胆保镖', '爱我就陪我看电影', '八星抱喜', '北京，纽约', '警察故事', '搜索', '我老公不靠谱', '警察故事2013', '爱神', '西游记之大圣归来', '大峰祖师', '情謎', '春娇与志明', '末日浩劫', '花咒', '火山对对碰',
    '一九四二', '中国合伙人', '超人：钢铁之躯', '何以笙箫默', '变节', '虎胆龙威', '单身男女', '博物馆奇妙夜', '味道中国', '狂怒', '前目的地', '一步之遥', '异度迷局', '从哪来，到哪去', '高海拔之恋Ⅱ', '斑马总动员', '痞子英雄2：黎明升起', '分歧者：异类觉醒', '大喜临门', '最佳嫌疑人', '摩登森林', '还魂之迷失曼谷', '无敌小飞猪', '情笛', '少年毛泽东', '木星上行', '神探亨特张', '斗茶', '魔都爱', '碟中谍', '一生一世', '匆匆那年', '画皮', '战马', '分手达人', '新年行动',
    '辛巴达历险记2', '追凶', '永春白鹤拳之擎天画卷', '我只要我们在一起', '不再说分手', '通灵之六世古宅', '帕丁顿熊', '车手', '女生宿舍', '大上海', '黄飞鸿之英雄有梦', '闺蜜', '奔驰的大葱', '河东狮吼2', '重返地球', '分手木马计', '那些年我们一起追的女孩', '我们毕业的夏天', '十二生肖', '铠甲勇士', '神奇海盗团', '璀璨的婚礼', '时光大战', '里约大冒险2', '不二神探', '人再囧途之泰囧', '我想结婚的时候你在哪', '不能说的夏天', '青春com', '抢劫坚果店', '101次求婚', '寒战', '黎明',
    '虐面人', '左耳', '一路惊喜', '洋妞到我家', '放手爱', '小时代', '变节：潜罪犯', '密道追踪', '移动迷宫', '大追捕', '反贪风暴', '机器纪元', '快乐到家', '杀手欧阳盆栽', '天机富春山居图', '花香', '男人如衣', '还魂', '伞头和他的女人', '爸爸去哪儿', '爱你不等来生', '年少轻狂', '大话西游之月光宝盒', '畫皮Ⅱ', '公路美人', '狂野非洲', '魔都爱之十二星座', '智取威虎山', '夺宝联盟', '龟兔再跑', '夜半梳头', '黄克功案件', '复仇者联盟', '哥斯拉', '有种你爱我', '临时同居', '熊出没之雪岭熊风',
    '死亡邮件', '笑功震武林', '国王的演讲', '曼德拉', '环太平洋', '海岛', '黑夜传说4：觉醒', '狄仁杰', '星际穿越', '兔侠', '搞定岳父大人', '天机·富春山居图', '十二生肖城市英雄', '情笛之爱', '河东狮吼', '超能陆战队', '风云', '丛林', '钢铁侠', '触不可及', '速度与激情6', '速度与激情7', '等你追我', '神通佛影', '37次想你', '黑夜传说前传', '虎胆龙威5', '无敌破坏王', '狙击时刻', '灵魂战车', '云图', '爱情狂想曲', '黑夜传说', '亡命地中海', '大闹天宫', '饭局也疯狂', '同桌的你',
    '暴力街区', '开心超人2：启源星之战', '吉星高照', '亲爱的', '安妮：纽约奇缘', '第七谎言', '冰川时代4', '求爱大作战', '边境风云', '喵星少年漂流记', '真爱', '男人如衣服', '夺命金', '我的早更女友', '喜羊羊与灰太狼之开心闯龙年', '熊出没', '坏姐姐之拆婚联盟', '密道追踪之阴兵虎符', '绣花鞋', '枪过境', '恐怖电影院', '庞贝末日', '大侦探波洛', '永春白鹤拳', '秘密花园', '赛尔号大电影', '海岛之恋', '秦时明月大电影', '笔仙惊魂3', '敢死队', '特功明星', '大武当', '风云1927',
    '谍影重重', '重返20岁', '碟中谍4', '杀生', '雨果', '旺角揸fit人', '快乐的大脚', '黑衣女人', '疯狂外星人', '罪恶赎金', '与贼同屋', '红包', '匹夫', '暴疯语', '马达加斯加的企鹅', '美女与野兽', '蜂鸟特攻', '十万伙急', '兔子镇的火狐狸', '考拉大冒险', '大闹天宫3D', '三更车库', '神秘世界历险记2', '异星战场', '叶问', '忆世界大冒险', '007：大破天幕杀机', '渴望的青春', '向阳花开', '谍影重重4', '白发魔女传之明月天国', '飓风营救', '小时代3：刺金时代', '81号农场', '闯入者', '死亡',
    '黎明之眼', '人间·小团圆', '国宝疑云', '钟馗伏魔', '青春.com', '分歧者', '食人虫', '我要你开花', '缘来是游戏', '宙斯', '胡桃夹子', '那些年，我们一起追的女孩', '爱情零距离', '博物馆奇妙夜3', '宝贝，对不起', '里约大冒险', '冰封', '疯狂的蠢贼', '马达加斯加', '城市游戏', '失恋33天', '画壁', '柯南', '丁丁历险记', '东城西就', '转山', '铁甲钢拳', '白蛇传说', '金陵十三钗', '星空', '我们一起追的女孩', '翻滚吧，阿信', '东成西就', '光棍终结者', '沉默的15分钟', '黄沙武士',
    '绿灯侠', '沉默的15分钟', '惊天战神', '三傻大闹宝莱坞', '亲密敌人', '杨门女将之军令如山', '遍地狼烟', '精英部队', '鸿门宴', '倾城之泪', '幸福额度', '驱魔者','看']
    for mode in mode_list:
        sentence=[]
        domain_data_path='../data/'+args.domain+'/'+args.domain+'_'+mode
        sent_path=args.output_dir+args.domain+'_seged_sent_'+mode
        tree_path=args.output_dir+args.domain+'_s_tree_'+mode

        with open(domain_data_path,'r') as reader:
            for line in reader:
                sentence.append(line)
        with open(sent_path,'w') as writer1:
                with open(tree_path,'w') as writer2:
                    for line in sentence:

                        label= line.strip().split()[0]
                        sen = line.strip().split()[1:]
                        words = segmentor.segment(' '.join(sen))
                        tag=-1
                        for tri in trigger_words:
                            if tri in words:
                                entity_name=tri
                                tag=1
                                break
                        if tag==-1:
                            print ' '.join(words)
                            entity_name=words[len(words)/2]

                        writer1.write(label+' '+' '.join(words)+'\n')
                        postags = postagger.postag(words)

                        arcs=parser.parse(words,postags)
                        ####################确定entity_name####################需要做实验
                        tree=convert(entity_name,words,postags,arcs)
                        writer2.write(tree+'\n')

    segmentor.release()
    postagger.release()
    parser.release()
